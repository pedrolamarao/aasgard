// settings

plugins
{
    id 'cpp-application'
}

// project

group 'aasgard'
version '0.1.0-SNAPSHOT'

application
{
    // XXX: Gradle 6.1 refuses to cross compile
    // XXX: convince Gradle 6.1 to configure compiler to 32 bits for now
    targetMachines = [ machines.windows.x86 ]

    binaries.whenElementFinalized {
    	def compiler = compileTask.get()
    	compiler.compilerArgs.addAll '-std=c++17', '-ffreestanding'
    	def linker = linkTask.get()
    	linker.linkerArgs.addAll '-nostdlib', '-m32', '-Ttext', '0x1000'
    }
    
    // XXX: Gradle 6.1 does not know how to compile asm sourceSets
    binaries.whenElementFinalized { binary ->
        def compileAsm = tasks.register("compileAsm${binary.name.capitalize()}", Assemble) {
            targetPlatform = binary.compileTask.get().targetPlatform
            toolChain = binary.toolChain
            source.from fileTree(dir: 'src/main/asm', includes: ['**/*.s'])
            includes.from file('src/main/public')
            includes.from file('src/main/headers')
            assemblerArgs = []
            it.objectFileDir = layout.buildDirectory.dir("asm/${binary.name}").get().asFile
        }
        binary.linkTask.get().configure {
            dependsOn compileAsm
            source.from compileAsm.map({ return fileTree(dir: it.objectFileDir, includes: ['**/*.s', '**/*.obj']) })
        }
    }
}

dependencies
{
	implementation project(':multiboot2')
	implementation project(':x86')
}
