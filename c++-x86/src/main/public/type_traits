// Copyright (C) 2012 Pedro Lamar√£o <pedro.lamarao@gmail.com>. All rights reserved.

#pragma once


namespace std
{
  template <typename T, T v>
  struct integral_constant
  {
    typedef T value_type;
    static constexpr value_type value = v;
    typedef integral_constant<T, v> type;
    constexpr operator value_type () { return value; }
  };

  typedef integral_constant<bool, true> true_type;

  typedef integral_constant<bool, false> false_type;

  //! is_array type function

  template <typename T> struct is_array : public false_type { };

  template <typename T> struct is_array <T[]> : public true_type { };

  template <typename T, size_t S> struct is_array <T[S]> : public true_type { };

  //! is_function type function

  template <typename T> struct is_function : public false_type { };

  template <typename T, typename... U> struct is_function <T (U...)> : public true_type { };

  template <typename T, typename... U> struct is_function <T (U...) const> : public true_type { };

  template <typename T, typename... U> struct is_function <T (U...) volatile> : public true_type { };

  template <typename T, typename... U> struct is_function <T (U...) const volatile> : public true_type { };

  //! remove_const type function

  template <typename T>
  struct remove_const
  {
    typedef T type;
  };

  template <typename T>
  struct remove_const<T const>
  {
    typedef T type;
  };

  //! remove_volatile type function

  template <typename T>
  struct remove_volatile
  {
    typedef T type;
  };

  template <typename T>
  struct remove_volatile<T volatile>
  {
    typedef T type;
  };

  //! remove_cv type function

  template <typename T>
  struct remove_cv
  {
    typedef typename remove_volatile<typename remove_const<T>::type>::type type;
  };

  //! remove_reference type function

  template <typename T>
  struct remove_reference
  {
    typedef T type;
  };

  template <typename T>
  struct remove_reference <T&>
  {
    typedef T type;
  };

  //! remove_extent type function

  template <typename T>
  struct remove_extent
  {
    typedef T type;
  };

  template <typename T>
  struct remove_extent<T[]>
  {
    typedef T type;
  };

  //! remove_pointer type function

  template <typename T>
  struct remove_pointer
  {
    typedef T type;
  };

  template <typename T>
  struct remove_pointer<T*>
  {
    typedef T type;
  };

  //! add_pointer type function

  template <typename T>
  struct add_pointer
  {
    typedef typename remove_reference<T>::type * type;
  };

  //! decay type function

  template <typename T>
  struct decay
  {
    typedef typename remove_cv<typename remove_reference<T>::type>::type type;
  };

  // TODO: define decay for is_array<T>

  // TODO: define decay for is_function<T>
}
