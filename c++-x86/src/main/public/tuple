// Copyright (C) 2012 Pedro Lamar√£o <pedro.lamarao@gmail.com>. All rights reserved.

#pragma once

#include <utility>


//! Declarations

namespace std
{
  namespace internal
  {
    template <typename Head, typename... Tail>
    struct tuple_representation;

    template <unsigned Ordinal, typename Head, typename... Tail>
    struct element_type;
  }

  template <typename... T>
  class tuple
  {
  public:

    explicit
    tuple (T && ... t) : _(forward<T>(t)...)
    {

    }

    template <typename... U>
    tuple (U && ... u) : _(forward<U>(u)...)
    {
      static_assert(sizeof...(T) == sizeof...(U), "requirement unfulfilled");
    }

    template <typename... U>
    tuple (tuple<U...> const & u) : _(u._)
    {
      static_assert(sizeof...(T) == sizeof...(U), "requirement unfulfilled");
    }

    template <typename... U>
    tuple (tuple<U...> && u) : _(u._)
    {
      static_assert(sizeof...(T) == sizeof...(U), "requirement unfulfilled");
    }

    template <typename... U>
    auto operator= (tuple<U...> const & u) -> tuple &
    {
      static_assert(sizeof...(T) == sizeof...(U), "requirement unfulfilled");

      _ = u._;
      return (* this);
    }

    template <typename... U>
    auto operator= (tuple<U...> && u) -> tuple &
    {
      static_assert(sizeof...(T) == sizeof...(U), "requirement unfulfilled");

      _ = move(u._);
      return (* this);
    }

    //! Regular

    tuple () = default ;

    tuple (tuple const &) = default ;

    tuple (tuple &&) = default ;

    ~tuple () = default ;

    auto operator= (tuple const &) -> tuple & = default ;

    auto operator= (tuple &&) -> tuple & = default ;

  public:

    internal::tuple_representation<T...> _ ;

  };

  template <typename... T>
  auto make_tuple (T && ... t) -> tuple<typename decay<T>::type ...> ;

  template <unsigned Ordinal, typename... T>
  constexpr
  auto get (tuple<T...> & t) -> typename internal::element_type<Ordinal, T...>::type & ;

  template <unsigned Ordinal, typename... T>
  constexpr
  auto get (tuple<T...> const & t) -> typename internal::element_type<Ordinal, T...>::type const & ;

  template <typename... T>
  auto tie (T & ... t) -> std::tuple<T & ...> ;
}

//! Inline definitions

namespace std
{
  namespace internal
  {
    template <typename Head, typename... Tail>
    struct tuple_representation
    {
      Head head;
      tuple_representation<Tail...> tail;

      tuple_representation () = default ;

      template <typename H, typename... T>
      tuple_representation (H && h, T && ... t) : head(forward<H>(h)), tail(forward<T>(t)...) { }

      template <typename H, typename... T>
      tuple_representation (tuple_representation<H, T...> const & x) : head(x.head), tail(x.tail) { }

      template <typename H, typename... T>
      tuple_representation (tuple_representation<H, T...> && x) : head(move(x.head)), tail(move(x.tail)) { }

      template <typename H, typename... T>
      auto operator= (tuple_representation<H, T...> const & x) -> tuple_representation &
      {
        head = x.head;
        tail = x.tail;
        return (* this);
      }

      template <typename H, typename... T>
      auto operator= (tuple_representation<H, T...> && x) -> tuple_representation &
      {
        head = move(x.head);
        tail = move(x.tail);
        return (* this);
      }
    };

    template <typename Head>
    struct tuple_representation<Head>
    {
      Head head;

      tuple_representation () = default ;

      template <typename H>
      tuple_representation (H && h) : head(forward<H>(h)) { }

      template <typename H>
      tuple_representation (tuple_representation<H> const & x) : head(x.head) { }

      template <typename H>
      tuple_representation (tuple_representation<H> && x) : head(move(x.head)) { }

      template <typename H>
      auto operator= (tuple_representation<H> const & x) -> tuple_representation &
      {
        head = x.head;
        return (* this);
      }

      template <typename H>
      auto operator= (tuple_representation<H> && x) -> tuple_representation &
      {
        head = move(x.head);
        return (* this);
      }
    };

    template <unsigned Ordinal, typename Head, typename... Tail>
    struct element_type
    {
      typedef typename element_type<(Ordinal - 1), Tail...>::type type;
    };

    template <typename Head, typename... Tail>
    struct element_type<0, Head, Tail...>
    {
      typedef Head type;
    };

    template <unsigned Ordinal, typename Head, typename... Tail>
    struct element_reference
    {
      auto operator() (tuple_representation<Head, Tail...> const & x) -> typename element_type<Ordinal, Head, Tail...>::type
      {
        return element_reference<(Ordinal - 1), Head, Tail...>::operator()(x);
      }
    };

    template <typename Head, typename... Tail>
    struct element_reference<0, Head, Tail...>
    {
      auto operator() (tuple_representation<Head, Tail...> const & x) -> typename element_type<0, Head, Tail...>::type
      {
        return x.head;
      }
    };
  }

  // TODO: remove reference_wrapper

  template <typename... Element>
  auto make_tuple (Element && ... element) -> tuple<typename decay<Element>::type ...>
  {
    return tuple<typename decay<Element>::type ...>(forward<Element>(element)...);
  }

  template <unsigned Ordinal, typename... Element>
  constexpr
  auto get (tuple<Element...> & x) -> typename internal::element_type<Ordinal, Element...>::type &
  {
    static_assert((Ordinal < sizeof...(Element)), "requirement unfulfilled");

    return internal::element_reference<Ordinal, Element...>()(x._);
  }

  template <unsigned Ordinal, typename... Element>
  constexpr
  auto get (tuple<Element...> const & x) -> typename internal::element_type<Ordinal, Element...>::type const &
  {
    static_assert((Ordinal < sizeof...(Element)), "requirement unfulfilled");

    return internal::element_reference<Ordinal, Element...>()(x._);
  }

  template <typename... T>
  auto tie (T & ... t) -> tuple <T & ...>
  {
    return tuple<T&...>(t...);
  }
}
